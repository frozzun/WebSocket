version: '3.8'
services:
  WebSocket:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/lawmon
      SPRING_DATASOURCE_USERNAME: qnlove
      SPRING_DATASOURCE_PASSWORD: chanyoup1@
      SPRING_DATA_MONGODB_URI: ${SPRING_DATA_MONGODB_URI}  # MongoDB 연결 정보
      SPRING_REDIS_HOST: ${SPRING_REDIS_HOST}  # Redis 연결 정보
      SPRING_REDIS_PORT: ${SPRING_REDIS_PORT}
    depends_on:
      - mysql
      - mongo
      - redis
    networks:
      - app-network

  mysql:
    container_name: mysql
    image: mysql:latest
    env_file:
      - .env
    ports:
      - "3306:3306"
    volumes:
      - db_mysql:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # init.sql 파일 매핑
    networks:
      - app-network

  mongo:
    container_name: mongo
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - db_mongo:/data/db
    environment:
      MONGO_INIT DB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INIT DB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    restart: always

  redis:
    container_name: redis
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - db_redis:/data
#      - ./redis/conf/redis.conf:/usr/local/conf/redis.conf
#    labels:
#      - "name=redis"
#      - "mode=standalone"
    restart: always
#    command: redis-server /usr/local/conf/redis.conf
    networks:
      - app-network

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:latest
    ports:
      - "5672:5672"  # AMQP Protocol Port
      - "15672:15672"  # Management UI Port
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    networks:
      - app-network


#  # 서비스 명
#  kafka:
#    # 사용할 이미지
#    image: wurstmeister/kafka
#    # 컨테이너명 설정
#    container_name: kafka
#    # 접근 포트 설정 (컨테이너 외부:컨테이너 내부)
#    ports:
#      - "9092:9092"
#    # 환경 변수 설정
#    environment:
#      KAFKA_ADVERTISED_HOST_NAME: localhost
#      KAFKA_CREATE_TOPICS: "Topic:1:1"
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#    # 볼륨 설정
#    volumes:
#      - /var/run/docker.sock
#    networks:
#      - app-network
#    # 의존 관계 설정
#    depends_on:
#      - zookeeper
#
#  # 서비스 명
#  zookeeper:
#    # 사용할 이미지
#    image: wurstmeister/zookeeper
#    # 컨테이너명 설정
#    container_name: zookeeper
#    # 접근 포트 설정 (컨테이너 외부:컨테이너 내부)
#    ports:
#      - "2181:2181"
#    networks:
#      - app-network

volumes:
  db_mysql:
  db_mongo:
  db_redis:


networks:
  app-network:
    driver: bridge